# -*- coding: utf-8 -*-
"""Homework-4

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fMKs8B-F0GFwrpZRsAUGxPoSNoGiKQ25
"""

import pandas as pd
import matplotlib.pyplot as plt

from google.colab import drive
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import Dense
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt
drive.mount('/content/drive')
df = pd.read_csv('./drive/MyDrive/Colab Notebooks/data/samsung.csv', header = None)


df2 = df.iloc[1:,1:8] # date 와 첫번째 행 자름

# df3 = df.loc[0,0]
# print(df3)

scaler_ = MinMaxScaler()
scaler_.fit(df2)
sam_scaled_ = scaler_.transform(df2)
sam_scaled_df = pd.DataFrame(sam_scaled_)

# print(type(sam_scaled_df)) #dataframe 형식

df2_X = sam_scaled_df.iloc[:,1:8] # 변환 값중 close 제외한 나머지
df2_y = sam_scaled_df.iloc[:,0]  #변환 close 값

# print(df2_X)
# print(df2_y)


X_train, X_test, y_train, y_test = train_test_split(df2_X, df2_y, test_size = 0.2, shuffle = True)
#print(X)
#print(y)
# print(type(y_test)) #series 형식


Y_test = y_test.to_numpy() # y_test 넘파이 변환, 그래프 그릴때 씀

model = Sequential()
model.add(Dense(10,input_dim = 6, activation = 'relu')) # 노드 10개 입력 6개
model.add(Dense(30,activation = 'relu'))
model.add(Dense(20, activation = 'relu'))
model.add(Dense(1,activation = 'sigmoid'))
model.summary() #내용 표시 

early_stopping_callback = EarlyStopping(monitor = 'val_loss', patience = 10) #early stopping , val_loss 값 관측
#model.compile(loss = 'mean_squared_error', optimizer ='adam',metrics = ['accuracy']) # 손실함수 binary_crossentropy, 옵티마이저 Adam, 화면 출력옵션 accuracy


model.compile(loss = 'mean_squared_error', optimizer ='adam',metrics = ['accuracy']) # 손실함수 mean_squared_error, 옵티마이저 Adam, 화면 출력옵션 accuracy
model.fit(X_train, y_train, epochs = 1000, batch_size = 50, validation_split= 0.25, verbose = 1, callbacks = [early_stopping_callback])



score = model.evaluate(X_test,y_test)

print('Test loss : ', score[0], 'Test accuracy:', score[1])

real_prices = []
pred_prices = []
X_num = []
n_iter=0

Y_prediction = model.predict(X_test).flatten()
for i in range(len(X_test)):
  real = Y_test[i]
  prediction = Y_prediction[i]
  # print('Real price : {}, Expected price : {}'.format(real,prediction))
  real_prices.append(real)
  pred_prices.append(prediction)
  n_iter = n_iter +1
  X_num.append(n_iter)

# print(type(real_prices)) #list 형식

#변환
scaler = MinMaxScaler()
scaler.fit(df2.iloc[:,0].values.reshape(-1,1))

r_p = pd.DataFrame(real_prices)
real_prices_t = scaler.inverse_transform(r_p)
p_p = pd.DataFrame(pred_prices)
pred_prices_t = scaler.inverse_transform(p_p)

plt.plot(X_num,pred_prices_t,label = 'Expected')
plt.plot(X_num, real_prices_t, label = 'Real')
plt.legend()
plt.show()